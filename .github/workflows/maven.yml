name: CI/CD Pipeline

on:
  push:
    branches:
      - 'feature/*'
      - 'fix/*'

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v2
        with:
          java-version: '19'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn clean install

      - name: Run unit tests
        run: mvn test

      - name: Build Docker image
        run: docker build -t my-spring-boot-app .

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Tag Docker image
        run: docker tag my-spring-boot-app:latest ${{ secrets.AWS_ACCOUNT_ID_DEV }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-spring-boot-app:latest

      - name: Push Docker image
        run: docker push ${{ secrets.AWS_ACCOUNT_ID_DEV }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-spring-boot-app:latest

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: Create PR for Developer Branch
          title: '[Automated PR] Code validation for ${{ github.ref_name }}'
          body: 'This PR was created automatically after successful validation.'
          branch: developer
          base: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy_dev:
    if: github.ref == 'refs/heads/developer' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v2
        with:
          java-version: '19'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn clean install

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=dev.tfvars
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Run Functional Tests
        run: mvn test -Pfunctional

  deploy_hom:
    if: github.ref == 'refs/heads/hom' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v2
        with:
          java-version: '19'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn clean install

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=hom.tfvars
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.HOM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.HOM_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Run Functional Tests
        run: mvn test -Pfunctional

  deploy_prod:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 19
        uses: actions/setup-java@v2
        with:
          java-version: '19'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn clean install

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=prod.tfvars
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
